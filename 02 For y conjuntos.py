'''Ejercicio con FOR para cada tipo de dato en Python'''

# 1. LISTA: Recorrer una lista de n칰meros y sumar todos los elementos
# Lista de n칰meros
numeros = [10, 20, 30, 40, 50]

# Inicializamos la variable para almacenar la suma
SUMA = 0

# Recorremos la lista con un ciclo FOR
for numero in numeros:
    SUMA += numero  # Sumamos cada n칰mero a la variable suma

print("Suma de los n칰meros en la lista:", SUMA)  # Deber칤a mostrar: 150
# 游닇 Aqu칤 se muestra c칩mo sumar los elementos de una lista usando FOR.

# 2. TUPLA: Recorrer una tupla de palabras y convertir cada palabra en
# may칰sculas
# Tupla de palabras
palabras = ("python", "es", "genial", "y", "poderoso")

# Recorremos la tupla con un ciclo FOR y convertimos cada palabra en may칰sculas
for palabra in palabras:
    print(palabra.upper())  # Imprimimos la palabra en may칰sculas
# 游닇 Mostramos c칩mo recorrer una tupla y modificar la forma de cada elemento
# (convertir a may칰sculas).

# 3. CONJUNTO: Recorrer un conjunto de nombres y verificar si un nombre
# espec칤fico est치 presente
# Conjunto de nombres
nombres = {"Andr칠s", "Katherin", "Juan", "Ana", "Camila"}

# Nombre a buscar
NOMBRE_A_BUSCAR = "Katherin"

# Recorremos el conjunto con un ciclo FOR y verificamos si el nombre est치
# presente
for nombre in nombres:
    if nombre == NOMBRE_A_BUSCAR:
        print(f"{NOMBRE_A_BUSCAR} se encuentra en el conjunto.")
        break  # Salimos del ciclo una vez que encontramos el nombre
else:
    print(f"{NOMBRE_A_BUSCAR} no est치 en el conjunto.")
# 游닇 El ciclo FOR aqu칤 se usa para buscar un nombre en un conjunto, el cual es
# desordenado.

# 4. DICCIONARIO: Recorrer un diccionario de usuarios con su rol y mostrar un
# mensaje para cada usuario
# Diccionario de usuarios y sus roles
usuarios_roles = {
    'Andr칠s': 'Administrador',
    'Katherin': 'Psic칩loga',
    'Juan': 'Desarrollador',
    'Ana': 'Dise침adora',
    'Camila': 'Project Manager'
}

# Recorremos el diccionario con un ciclo FOR
for usuario, rol in usuarios_roles.items():
    print(f"{usuario} tiene el rol de {rol}.")
# 游닇 Aqu칤 mostramos c칩mo recorrer un diccionario y acceder tanto a las claves
# como a los valores.

# 5. FROZENSET: Recorrer un frozenset de n칰meros y verificar si un n칰mero
# espec칤fico est치 presente
# Frozenset de n칰meros
numeros_inmutables = frozenset([1, 2, 3, 4, 5])

# N칰mero a verificar
NUM_A_VERIFICAR = 3

# Recorremos el frozenset con un ciclo FOR
for numero in numeros_inmutables:
    if numero == NUM_A_VERIFICAR:
        print(f"{NUM_A_VERIFICAR} est치 presente en el frozenset.")
        break  # Salimos del ciclo una vez que encontramos el n칰mero
else:
    print(f"{NUM_A_VERIFICAR} no est치 en el frozenset.")
# 游닇 El ciclo FOR se usa para recorrer un frozenset y verificar la presencia
# de un n칰mero.
